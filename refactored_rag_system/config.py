from typing import Dict, List, Tuple, Callable, Any
from dataclasses import dataclass
import os

@dataclass
class RAGConfig:
    openai_api_key: str
    supabase_url: str
    supabase_key: str
    model_name: str = os.getenv("MODEL_NAME", "gpt-3.5-turbo")
    temperature: float = float(os.getenv("MODEL_TEMPERATURE", "0.7"))
    max_tokens: int = int(os.getenv("MODEL_MAX_TOKENS", "1000"))
    chunk_size: int = 1000
    chunk_overlap: int = 200
    table_name: str = os.getenv("VECTOR_TABLE", "documents")
    query_name: str = os.getenv("VECTOR_QUERY_FN", "match_documents")

# Smart Responses Configuration
SMART_RESPONSES: Dict[Tuple[str, ...], Callable[[str], str]] = {
    # Greetings
    ("ุงููุง", "ุฃููุง", "ูุฑุญุจุง", "ุงูุณูุงู ุนูููู", "hello", "hi", "ูุฑุญุจุชูู", "ููุง", "ุฃูููู"): 
        lambda user: f"ุฃููุงู {user}!" if user else "ุฃููุงู ูุณููุงู! ููู ุญุงููุ ุฃูุง ุตุฏููุ ูุณุงุนุฏู ุงูุฐูู ูู ุฏูุงู ูุฌูุ ุณุนูุฏ ุจููุงุฆู.",
    
    # Farewells
    ("ูุน ุงูุณูุงูุฉ", "ุฅูู ุงูููุงุก", "goodbye", "bye", "ุณูุงู", "ุจุงู"): 
        lambda _: "ูุฏุงุนุงู! ูุชููู ูู ูููุงู ุณุนูุฏุงู.",
    
    # How are you
    ("ููู ุงูุญุงู", "ููู ุญุงูู", "how are you", "ุดุฎุจุงุฑู", "ุดูููู", "ูููู"): 
        lambda user: f"ุงูุญูุฏ ููู ุจุฎูุฑ {user or ''}. ููู ุฃูุฏุฑ ุฃุณุงุนุฏู ุงููููุ",
    
    # Thanks
    ("ุดูุฑุง", "ุดูุฑุงู", "thank you", "thanks", "ูุดููุฑ", "ุชุณูู"): 
        lambda user: f"ุงูุนูู {user or ''}! ุณุนูุฏ ุจูุณุงุนุฏุชู.",
    
    # About the assistant
    ("ุงุณูู", "your name", "ูู ุงูุช", "ูู ุฃูุช", "ูุด ุงุณูู", "ูุง ุงุณูู"): 
        lambda _: "ุฃูุง ุตุฏููุ ูุณุงุนุฏู ุงูุฐูู ูู ุฏูุงู ูุฌู. ุฃุณุงุนุฏู ูู ุงูุชุณูู ูุงูุฅุฌุงุจุฉ ุนูู ุฃุณุฆูุชู.",
    
    # About the user
    ("ูุด ุงุณูู", "ูุง ุงุณูู", "ุงุณูู", "my name", "who am i", "ูู ุฃูุง"): 
        lambda user: f"ุงุณูู {user} ๐" if user and user != "ูุณุชุฎุฏู" else "ุนุฐุฑุงูุ ูุง ุฃุนุฑู ุงุณูู. ูู ููููู ุฅุฎุจุงุฑู ุจุงุณููุ",
    
    # Capabilities
    ("ูุด ุชูุฏุฑ ุชุณูู", "what can you do", "ูุฏุฑุงุชู", "ูุด ุชุณูู", "ุฅูุด ุชูุฏุฑ"): 
        lambda _: "ุฃุณุงุนุฏู ูู: ุงูุจุญุซ ุนู ุงูููุชุฌุงุชุ ูุนุฑูุฉ ุงููุฑูุนุ ุทุฑู ุงูุฏูุนุ ุงูููุงุชูุฑุ ุฅูุฎ.",
    
    # About the company
    ("ุฏูุงู ูุฌู", "ุงูุดุฑูุฉ", "company", "ุงููุชุฌุฑ", "ุงูููุตุฉ"): 
        lambda user: f"ุฏูุงู ูุฌู ููุตุฉ ุณุนูุฏูุฉ ูุจุชูุฑุฉ ุชูุฏู ุชุฌุฑุจุฉ ุชุณูู ุฐููุฉุ ุชุฏุฎูุ ุชุฎุชุงุฑ ููุชุฌุงุชูุ ูุชุฎุฑุฌ ุจุฏูู ุงูุญุงุฌุฉ ูููููู ุนูุฏ ุงููุงุดูุฑ.",
    
    # QR codes
    ("qr", "ููู ุขุฑ", "ุจุงุฑููุฏ", "ููุฏ"): 
        lambda _: "ูู ุฏูุงู ูุฌู ุชุจุฏุฃ ุฑุญูุชู ุจูุณุญ ููุฏ QRุ ููู ุซู ููููู ุงูุชุณูู ุจุญุฑูุฉ ูุงูุฏูุน ูุชู ุจุดูู ุชููุงุฆู ูุณูุณ ุนูุฏ ุงููุบุงุฏุฑุฉ.",
    
    # AI
    ("ุฐูุงุก ุงุตุทูุงุนู", "ai", "artificial intelligence", "ุงูุฐูุงุก"): 
        lambda _: "ูุณุชุฎุฏู ุชูููุงุช ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูุชุชุจุน ุงููุดุชุฑูุงุชุ ุชุฎุตูุต ุงูุนุฑูุถุ ูุถูุงู ุชุฌุฑุจุฉ ุณูุณุฉ ุจุฏูู ุชุฏุฎู ูุฏูู.",
    
    # Vending machines
    ("ุขูุฉ ุจูุน", "ูุงูููุฉ", "vending machine", "ูุงูููุงุช"): 
        lambda _: "ุขูุงุชูุง ููุณุช ูุฌุฑุฏ ูุงูููุงุช ุจูุน ุชูููุฏูุฉุ ุจู ูู ููุตุงุช ุฐููุฉ ุชุชูุญ ูู ุงูุฏุฎููุ ุงุฎุชูุงุฑ ุงูููุชุฌุงุชุ ูุงูุฎุฑูุฌ ูุงูุฏูุน ูุจุงุดุฑุฉ ุจุฏูู ุงูุชุธุงุฑ.",
    
    # How to buy
    ("ููู ุฃุดุชุฑู", "ุทุฑููุฉ ุงูุฏูุน", "ููู ุฃุณุชุฎุฏู", "ุทุฑููุฉ ุงูุดุฑุงุก", "ูุด ุชูุฏู ุงูููุตุฉ", "ุงูุฎุฏูุงุช"): 
        lambda user: f"ุฏูุงู ูุฌู ููุฏู: 1) ุชุณูู ุณุฑูุน ุนุจุฑ QRุ 2) ููุชุฌุงุช ูุชููุนุฉ (ูุดุฑูุจุงุชุ ูุฌุจุงุช ุฎูููุฉ)ุ 3) ุฏูุน ุฅููุชุฑููู ุขููุ 4) ูุฑูุน 24/7ุ 5) ุชุฌุฑุจุฉ ุฐููุฉ ูุฎุตุตุฉ.",
    
    # Payment methods
    ("ููู ุงุฏูุน", "ุทุฑู ุงูุฏูุน", "payment", "ุฏูุน"): 
        lambda _: "ูุฏุนู ูู ุฏูุงู ูุฌู: ูุฏู/ุจุทุงูุงุชุ Apple Pay/Google Payุ ููุฏุงูุ ูSTC Pay.",
    
    # Branches
    ("ุฃูู ุงููุฑูุน", "ููู ูููุนูู", "ูุฑูุน", "branches", "locations"): 
        lambda user: f"ูุฏููุง ูุฑูุน ุฏูุงู ูุฌู ูู ุงูุฑูุงุถ ูุฌุฏุฉ ูุงูุฏูุงู ูุงูุฎุจุฑ ูุงููุฏููุฉ.",
    
    # Working hours
    ("ูุชู ุชูุชุญูู", "ุณุงุนุงุช ุงูุนูู", "open"): 
        lambda _: "ูุฑูุน ุฏูุงู ูุฌู ุชุนูู 24/7 ูุชูููุฑ ุงูุฎุฏูุฉ ุนูู ูุฏุงุฑ ุงูุณุงุนุฉ.",
    
    # Prices
    ("ูู ุงูุฃุณุนุงุฑ", "price", "ุงูุณุนุฑ", "ุงูุชูููุฉ"): 
        lambda user: f"ุฃุณุนุงุฑ ุฏูุงู ูุฌู ุชุชุฑุงูุญ ูู 2.50 ุฑ.ุณ ุฅูู 8.00 ุฑ.ุณ ุญุณุจ ุงูููุชุฌ.",
    
    # Weather
    ("ุงูุทูุณ", "weather"): 
        lambda _: "ูุง ุฃูุฏุฑ ุฃุฌูุจ ุงูุทูุณ ุงูุขูุ ููู ุฃูุฏุฑ ุฃุณุงุนุฏู ูู ุงูุชุณูู ูู ุฏูุงู ูุฌู.",
    
    # Date
    ("ุงูุชุงุฑูุฎ", "date", "ุงูููู"): 
        lambda _: f"ุงูุชุงุฑูุฎ: {__import__('datetime').datetime.now().strftime('%Y/%m/%d')}",
    
    # Knowledge scope
    ("ูุทุงู ูุนุฑูุชู", "ูุทุงู ุงููุนุฑูุฉ", "ูุฏุฑุงุชู", "ูุด ุชูุฏุฑ", "ุฅูุด ุชูุฏุฑ"): 
        lambda user: f"ูุทุงู ูุนุฑูุชู ูุชุฑูุฒ ุนูู ุฏูุงู ูุฌู: ุงูููุชุฌุงุชุ ุงููุฑูุนุ ุงูููุงุชูุฑุ ุทุฑู ุงูุฏูุนุ ุงูุฎุฏูุงุชุ ูุงูุชุณูู ุงูุฐูู. ูููููู ูุณุงุนุฏุชู ูู ุฃู ุงุณุชูุณุงุฑ ุญูู ุฎุฏูุงุชูุง.",
    
    # Platform context
    ("ุงูููุตุฉ", "platform", "ุงูุณูุงู", "context"): 
        lambda user: f"ุงูููุตุฉ ุงูุชู ุฃุชุญุฏุซ ุนููุง ูู ุฏูุงู ูุฌู - ููุตุฉ ุงูุชุณูู ุงูุฐูู ุงูุณุนูุฏูุฉ. ูุญู ููุฏู ุฎุฏูุงุช ุงูุจูุน ุงูุขูู ุงูุฐูู ูุน ุชุฌุฑุจุฉ ุฏูุน ุณุฑูุนุฉ ูุขููุฉ.",
}

# Smart Product Queries
SMART_PRODUCT_QUERIES: Dict[Tuple[str, ...], str] = {
    # Price queries
    ("ุงุนูู ุณุนุฑ", "ุฃุนูู ุณุนุฑ", "ุงุบูู", "ุฃุบูู", "ุฃุนูู ุชูููุฉ", "ุงุนูู ุชูููุฉ", "highest price", "most expensive"): "highest_price",
    ("ุงูู ุณุนุฑ", "ุฃูู ุณุนุฑ", "ุงุฑุฎุต", "ุฃุฑุฎุต", "ุฃูู ุชูููุฉ", "ุงูู ุชูููุฉ", "lowest price", "cheapest"): "lowest_price",
    ("ุงุนูู ูุงููุฑู", "ุฃุนูู ูุงููุฑู", "ุฃุนูู ุณุนุฑุงุช", "ุงุนูู ุณุนุฑุงุช", "highest calories", "most calories"): "highest_calories",
    
    # Calories queries
    ("ูู ููู ุณุนุฑุฉ", "ูู ุณุนุฑุฉ", "ูู ุณุนุฑุงุช", "ูู ุณุนุฑุงุช ุญุฑุงุฑูุฉ", "calories", "ุณุนุฑุงุช ุญุฑุงุฑูุฉ", "ุณุนุฑุฉ ุญุฑุงุฑูุฉ"): "all_calories",
    
    # Specific product categories
    ("ูู ุณุนุฑ ุงูุนุตูุฑ", "ุณุนุฑ ุงูุนุตูุฑ", "ุชูููุฉ ุงูุนุตูุฑ", "price of juice"): "juice_prices",
    ("ูู ุณุนุฑ ุงูุญููุจ", "ุณุนุฑ ุงูุญููุจ", "ุชูููุฉ ุงูุญููุจ", "price of milk"): "milk_prices",
    ("ูู ุณุนุฑ ุงูุดููููุงุชุฉ", "ุณุนุฑ ุงูุดููููุงุชุฉ", "ุชูููุฉ ุงูุดููููุงุชุฉ", "price of chocolate"): "chocolate_prices",
    ("ูู ุณุนุฑ ุงูุดูุจุณ", "ุณุนุฑ ุงูุดูุจุณ", "ุชูููุฉ ุงูุดูุจุณ", "price of chips", "ูู ุณุนุฑ ุงูููุฑูุดุงุช", "ุณุนุฑ ุงูููุฑูุดุงุช"): "chips_prices",
    
    # Comparison
    ("ูุงุฑู", "ููุงุฑูุฉ", "ููุงุฑูู", "compare", "competition", "ููุงูุณุฉ", "ููุงูุณูู", "ุงูุงุณูุงู", "ูุชุฌุฑ ุงุฎุฑ", "ูุชุฌุฑ ุขุฎุฑ"): "price_comparison",
}

# Product Keywords for Info Queries
PRODUCT_KEYWORDS: List[str] = [
    "ุนุตูุฑ ุงููุฑุงุนู", "ุนุตูุฑ ุงูุฑุจูุน", "ุจุงุฑูู", "ุจุณูุฑูู", "ุฌุงููุณู", 
    "ุณููุชูุฒ", "ููุช ูุงุช", "ููููุฑ", "ุญููุจ ูุงุฏู", "ุฃูุฑูู", 
    "ุจุฑูุชูู ุจุงุฑ", "ุตู ุชูุจ", "ุดูุจุณ ููุฒ", "ุจุฑููุฌูุฒ ุจุงุฑุจููู"
]

# Database Queries
DATABASE_QUERIES: Dict[Tuple[str, ...], str] = {
    # Products
    ("ุงูููุชุฌุงุช", "products", "product", "ูุด ุงูููุชุฌุงุช", "ูุง ูู ุงูููุชุฌุงุช", "ุนุฑุถ ุงูููุชุฌุงุช"): "products",
    
    # Prices
    ("ุงูุงุณุนุงุฑ", "prices", "price", "ูู ุงูุณุนุฑ", "ูู ุงูุงุณุนุงุฑ", "ุงูุชูููุฉ", "cost"): "prices",
    
    # Branches
    ("ุงููุฑูุน", "branches", "branch", "ููู ุงููุฑูุน", "ุฃูู ุงููุฑูุน", "ููุงูุน ุงููุฑูุน", "ูุฑูุนูู"): "branches",
    
    # Invoices (user-specific)
    ("ููุงุชูุฑู", "ููุงุชูุฑู", "invoices", "invoice", "ูู ุนุฏุฏ ููุงุชูุฑู", "ุนุฑุถ ููุงุชูุฑู", "ููุงุชูุฑู"): "user_invoices",
    
    # General invoices
    ("ุงูููุงุชูุฑ", "invoices", "invoice"): "general_invoices",
}

# Product Translations (temporary until moved to database)
PRODUCT_TRANSLATIONS: Dict[str, str] = {
    'Almarai_juice': 'ุนุตูุฑ ุงููุฑุงุนู',
    'alrabie_juice': 'ุนุตูุฑ ุงูุฑุจูุน',
    'Nadec_Mlik': 'ุญููุจ ูุงุฏู',
    'Sun_top': 'ุตู ุชูุจ',
    'barni': 'ุจุงุฑูู',
    'biskrem': 'ุจุณูุฑูู',
    'loacker': 'ููููุฑ',
    'oreos': 'ุฃูุฑูู',
    'galaxy': 'ุฌุงููุณู',
    'green_skittles': 'ุณููุชูุฒ ุฃุฎุถุฑ',
    'kit_kat': 'ููุช ูุงุช',
    'pink_skittles': 'ุณููุชูุฒ ูุฑุฏู',
    'protein_bar': 'ุจุฑูุชูู ุจุงุฑ',
    'Lays_chips': 'ุดูุจุณ ููุฒ',
    'pringles_barbeque': 'ุจุฑููุฌูุฒ ุจุงุฑุจููู'
}
